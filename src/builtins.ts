export const builtinFunctions = new Map<string, string>([
    ['print', 'Print any of the given values to stdout.\n\n**Parameters:**\n- `...values` - Arbitrary values to print\n\n**Returns:** `number` - The amount of bytes written'],
    ['printf', 'Print formatted string to stdout.\n\n**Parameters:**\n- `format` - Format string\n- `...args` - Arguments for formatting\n\n**Returns:** `number` - The amount of bytes written'],
    ['sprintf', 'Return formatted string.\n\n**Parameters:**\n- `format` - Format string\n- `...args` - Arguments for formatting\n\n**Returns:** `string` - The formatted string'],
    ['length', 'Determine the length of the given object, array or string.\n\n**Parameters:**\n- `x` - The input object, array, or string\n\n**Returns:** `number|null` - The length of the input\n\n**Example:**\n```ucode\nlength("test")                             // 4\nlength([true, false, null, 123, "test"])   // 5\n```'],
    ['substr', 'Extract substring from string.\n\n**Parameters:**\n- `string` - The input string\n- `start` - Start position\n- `length` - Length of substring (optional)\n\n**Returns:** `string` - The extracted substring'],
    ['split', 'Split string into array of substrings.\n\n**Parameters:**\n- `string` - The input string\n- `separator` - String or regex to split on\n- `limit` - Maximum number of splits (optional)\n\n**Returns:** `array` - Array of substrings'],
    ['join', 'Join array elements into string.\n\n**Parameters:**\n- `separator` - String to join with\n- `array` - Array to join\n\n**Returns:** `string` - The joined string\n\n**Note:** Parameter order is `join(separator, array)` - different from JavaScript!'],
    ['trim', 'Remove whitespace from both ends of string.\n\n**Parameters:**\n- `string` - The input string\n\n**Returns:** `string` - The trimmed string'],
    ['ltrim', 'Remove whitespace from left end of string.\n\n**Parameters:**\n- `string` - The input string\n\n**Returns:** `string` - The left-trimmed string'],
    ['rtrim', 'Remove whitespace from right end of string.\n\n**Parameters:**\n- `string` - The input string\n\n**Returns:** `string` - The right-trimmed string'],
    ['chr', 'Convert ASCII code to character.\n\n**Parameters:**\n- `code` - ASCII code number\n\n**Returns:** `string` - The character'],
    ['ord', 'Get ASCII code of character.\n\n**Parameters:**\n- `char` - The character\n\n**Returns:** `number` - The ASCII code'],
    ['uc', 'Convert string to uppercase.\n\n**Parameters:**\n- `string` - The string to convert\n\n**Returns:** `string` - Uppercase string'],
    ['lc', 'Convert string to lowercase.\n\n**Parameters:**\n- `string` - The string to convert\n\n**Returns:** `string` - Lowercase string'],
    ['type', 'Get type of value.\n\n**Parameters:**\n- `value` - The value to check\n\n**Returns:** `string` - Type name ("object", "array", "string", "number", "boolean", "function", "null")'],
    ['keys', 'Get array of object keys.\n\n**Parameters:**\n- `object` - The object\n\n**Returns:** `array|null` - Array of property names, or null if not an object'],
    ['values', 'Get array of object values.\n\n**Parameters:**\n- `object` - The object\n\n**Returns:** `array|null` - Array of property values, or null if not an object'],
    ['push', 'Add elements to end of array.\n\n**Parameters:**\n- `array` - The array\n- `...values` - Values to add\n\n**Returns:** `number` - New length of array'],
    ['pop', 'Remove and return last element from array.\n\n**Parameters:**\n- `array` - The array\n\n**Returns:** `*` - The removed element'],
    ['shift', 'Remove and return first element from array.\n\n**Parameters:**\n- `array` - The array\n\n**Returns:** `*` - The removed element'],
    ['unshift', 'Add elements to beginning of array.\n\n**Parameters:**\n- `array` - The array\n- `...values` - Values to add\n\n**Returns:** `number` - New length of array'],
    ['index', 'Find index of substring or element.\n\n**Parameters:**\n- `haystack` - String or array to search in\n- `needle` - Value to search for\n\n**Returns:** `number` - Index of first occurrence, or -1 if not found\n\n**Note:** Parameter order is `index(haystack, needle)`'],
    ['require', 'Load and return module.\n\n**Parameters:**\n- `module` - Module name or path\n\n**Returns:** `*` - The loaded module'],
    ['include', 'Include file contents inline.\n\n**Parameters:**\n- `path` - Path to file\n\n**Returns:** `*` - Result of included file'],
    ['json', 'Parse JSON string or stringify value.\n\n**Parameters:**\n- `value` - String to parse or value to stringify\n\n**Returns:** `*` - Parsed object or JSON string'],
    ['match', 'Match string against regex.\n\n**Parameters:**\n- `string` - The string to match\n- `regex` - Regular expression\n\n**Returns:** `array|null` - Match results or null'],
    ['replace', 'Replace occurrences in string.\n\n**Parameters:**\n- `string` - The string\n- `search` - String or regex to search for\n- `replacement` - Replacement string\n\n**Returns:** `string` - String with replacements'],
    ['system', 'Execute shell command.\n\n**Parameters:**\n- `command` - Command to execute\n\n**Returns:** `number` - Exit code of command'],
    ['time', 'Get current Unix timestamp.\n\n**Returns:** `number` - Current time in seconds since epoch'],
    ['sleep', 'Pause execution for specified seconds.\n\n**Parameters:**\n- `seconds` - Number of seconds to sleep\n\n**Returns:** `null`'],
    ['localtime', 'Convert timestamp to local time components.\n\n**Parameters:**\n- `timestamp` - Unix timestamp (optional, defaults to current time)\n\n**Returns:** `array` - Time components: [year, month, day, hour, minute, second, weekday, yearday]'],
    ['gmtime', 'Convert timestamp to UTC time components.\n\n**Parameters:**\n- `timestamp` - Unix timestamp (optional, defaults to current time)\n\n**Returns:** `array` - Time components: [year, month, day, hour, minute, second, weekday, yearday]'],
    ['timelocal', 'Convert local time components to timestamp.\n\n**Parameters:**\n- `timeArray` - Array of time components [year, month, day, hour, minute, second]\n\n**Returns:** `number` - Unix timestamp'],
    ['timegm', 'Convert UTC time components to timestamp.\n\n**Parameters:**\n- `timeArray` - Array of time components [year, month, day, hour, minute, second]\n\n**Returns:** `number` - Unix timestamp'],
    ['min', 'Find minimum value from numbers.\n\n**Parameters:**\n- `...numbers` - Numbers to compare\n\n**Returns:** `number` - The smallest number'],
    ['max', 'Find maximum value from numbers.\n\n**Parameters:**\n- `...numbers` - Numbers to compare\n\n**Returns:** `number` - The largest number'],
    ['uniq', 'Remove duplicate values from array.\n\n**Parameters:**\n- `array` - The input array\n\n**Returns:** `array` - Array with unique values'],
    ['b64enc', 'Encode string to Base64.\n\n**Parameters:**\n- `string` - String to encode\n\n**Returns:** `string` - Base64 encoded string'],
    ['b64dec', 'Decode Base64 string.\n\n**Parameters:**\n- `string` - Base64 string to decode\n\n**Returns:** `string` - Decoded string'],
    ['hexenc', 'Encode string to hexadecimal.\n\n**Parameters:**\n- `string` - String to encode\n\n**Returns:** `string` - Hexadecimal encoded string'],
    ['hexdec', 'Decode hexadecimal string.\n\n**Parameters:**\n- `string` - Hexadecimal string to decode\n\n**Returns:** `string` - Decoded string'],
    ['hex', 'Convert number to hexadecimal string.\n\n**Parameters:**\n- `number` - Number to convert\n\n**Returns:** `string` - Hexadecimal representation'],
    ['uchr', 'Convert Unicode code point to character.\n\n**Parameters:**\n- `code` - Unicode code point\n\n**Returns:** `string` - The Unicode character'],
    ['iptoarr', 'Convert IP address string to array of components.\n\n**Parameters:**\n- `ipString` - IP address string (IPv4 or IPv6)\n\n**Returns:** `array` - Array of IP address components\n\n**Example:**\n```ucode\niptoarr("192.168.1.1")  // [192, 168, 1, 1]\n```'],
    ['arrtoip', 'Convert array of IP components to IP address string.\n\n**Parameters:**\n- `ipArray` - Array of IP address components\n\n**Returns:** `string` - IP address string\n\n**Example:**\n```ucode\narrtoip([192, 168, 1, 1])  // "192.168.1.1"\n```'],
    ['int', 'Convert value to integer.\n\n**Parameters:**\n- `value` - String or number to convert to integer\n\n**Returns:** `number` - Integer value\n\n**Example:**\n```ucode\nint("123")    // 123\nint(45.67)    // 45\nint("-89")    // -89\n```'],
    ['loadstring', 'Load and execute uCode from string.\n\n**Parameters:**\n- `code` - String containing uCode source code\n\n**Returns:** `*` - Result of executed code\n\n**Example:**\n```ucode\nloadstring("return 42")()  // 42\n```'],
    ['loadfile', 'Load and execute uCode from file.\n\n**Parameters:**\n- `path` - Path to uCode file\n\n**Returns:** `*` - Result of executed file\n\n**Example:**\n```ucode\nloadfile("script.uc")()\n```'],
    ['wildcard', 'Test if a wildcard pattern matches a subject string.\n\n**Parameters:**\n- `pattern` - Wildcard pattern string (supports *, ?, [abc])\n- `subject` - String to test against the pattern\n\n**Returns:** `boolean` - True if pattern matches, false otherwise\n\n**Example:**\n```ucode\nwildcard("*.txt", "document.txt")    // true\nwildcard("test?", "test1")           // true\nwildcard("[0-9]*", "5files")         // true\n```'],
    ['regexp', 'Compile a regular expression from pattern string.\n\n**Parameters:**\n- `pattern` - Regular expression pattern string\n- `flags` - Optional flags string ("i", "g", "s", "m")\n\n**Returns:** `regexp` - Compiled regular expression object\n\n**Example:**\n```ucode\nlet re = regexp("[0-9]+", "g");\nmatch("test123", re);  // ["123"]\n```'],
    ['assert', 'Assert that a condition is true, throw exception if false.\n\n**Parameters:**\n- `condition` - Value to test for truthiness\n- `message` - Optional error message string\n\n**Returns:** `*` - The condition value if truthy\n\n**Throws:** Exception if condition is falsy\n\n**Example:**\n```ucode\nassert(x > 0, "x must be positive");\nassert(array.length > 0);\n```'],
    ['call', 'Invoke a function with modified context and environment.\n\n**Parameters:**\n- `function` - Function to invoke\n- `thisContext` - Value for "this" context (optional)\n- `environment` - Global environment object (optional)\n- `...args` - Arguments to pass to function\n\n**Returns:** `*` - Result of function call\n\n**Example:**\n```ucode\ncall(myFunction, null, null, arg1, arg2);\n```'],
    ['signal', 'Set up signal handlers for Unix signals.\n\n**Parameters:**\n- `signal` - Signal number or name (with/without "SIG" prefix)\n- `handler` - Handler function (optional)\n\n**Returns:** `*` - Previous handler or signal behavior\n\n**Example:**\n```ucode\nsignal(15, function() { print("SIGTERM received"); });\nsignal("SIGINT", exitHandler);\n```'],
    ['type', 'Get the type of a value.\n\n**Parameters:**\n- `value` - Any value to inspect\n\n**Returns:** `string` - Type name ("object", "array", "string", "number", "boolean", "function", "null")\n\n**Example:**\n```ucode\ntype(42);        // "number"\ntype([1,2,3]);   // "array"\ntype("hello");   // "string"\n```'],
    ['clock', 'Get current process CPU time.\n\n**Returns:** `number` - CPU time in seconds\n\n**Example:**\n```ucode\nlet start = clock();\n// ... do work ...\nlet elapsed = clock() - start;\n```'],
    ['sourcepath', 'Get the path of the current source file.\n\n**Returns:** `string` - Absolute path to current source file\n\n**Example:**\n```ucode\nlet currentFile = sourcepath();\nprint("Running:", currentFile);\n```'],
    ['gc', 'Trigger garbage collection.\n\n**Returns:** `null`\n\n**Example:**\n```ucode\ngc();  // Force garbage collection\n```']
]);