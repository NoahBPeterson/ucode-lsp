/**
 * UCI module type definitions and function signatures
 * Based on ucode/lib/uci.c
 */

export interface UciFunctionSignature {
  name: string;
  parameters: Array<{
    name: string;
    type: string;
    optional: boolean;
    defaultValue?: any;
  }>;
  returnType: string;
  description: string;
}

export const uciFunctions: Map<string, UciFunctionSignature> = new Map([
  ["error", {
    name: "error",
    parameters: [],
    returnType: "string | null",
    description: "Returns a string containing a description of the last occurred error or null if there is no error information."
  }],
  ["cursor", {
    name: "cursor",
    parameters: [
      { name: "config_dir", type: "string", optional: true, defaultValue: "/etc/config" },
      { name: "delta_dir", type: "string", optional: true, defaultValue: "/tmp/.uci" },
      { name: "config2_dir", type: "string", optional: true, defaultValue: "/var/run/uci" },
      { name: "flags", type: "object", optional: true }
    ],
    returnType: "uci.cursor | null",
    description: "Instantiate uci cursor. A uci cursor is a context for interacting with uci configuration files."
  }]
]);

export const uciCursorMethods: Map<string, UciFunctionSignature> = new Map([
  ["load", {
    name: "load",
    parameters: [
      { name: "config", type: "string", optional: false }
    ],
    returnType: "boolean | null",
    description: "Explicitly reload configuration file. Returns true if the configuration was successfully loaded."
  }],
  ["unload", {
    name: "unload",
    parameters: [
      { name: "config", type: "string", optional: false }
    ],
    returnType: "boolean | null",
    description: "Explicitly unload configuration file. Returns true if the configuration was successfully unloaded."
  }],
  ["get", {
    name: "get",
    parameters: [
      { name: "config", type: "string", optional: false },
      { name: "section", type: "string", optional: false },
      { name: "option", type: "string", optional: true }
    ],
    returnType: "string | string[] | null",
    description: "Query a single option value or section type. When invoked with three arguments, returns the option value. When invoked with two arguments, returns the section type."
  }],
  ["get_all", {
    name: "get_all",
    parameters: [
      { name: "config", type: "string", optional: false },
      { name: "section", type: "string", optional: true }
    ],
    returnType: "object | null",
    description: "Query a complete section or configuration. When invoked with two arguments, returns all values of the specified section. When invoked with one argument, returns a nested dictionary of all sections."
  }],
  ["get_first", {
    name: "get_first",
    parameters: [
      { name: "config", type: "string", optional: false },
      { name: "type", type: "string", optional: false },
      { name: "option", type: "string", optional: true }
    ],
    returnType: "string | string[] | null",
    description: "Query option value or name of first section of given type. When invoked with three arguments, returns the option value. When invoked with two arguments, returns the section name."
  }],
  ["add", {
    name: "add",
    parameters: [
      { name: "config", type: "string", optional: false },
      { name: "type", type: "string", optional: false }
    ],
    returnType: "string | null",
    description: "Add anonymous section to given configuration. Returns the autogenerated, ephemeral name of the added unnamed section."
  }],
  ["set", {
    name: "set",
    parameters: [
      { name: "config", type: "string", optional: false },
      { name: "section", type: "string", optional: false },
      { name: "option_or_type", type: "string", optional: false },
      { name: "value", type: "string | string[] | number | boolean", optional: true }
    ],
    returnType: "boolean | null",
    description: "Set option value or add named section in given configuration. Returns true if the operation succeeded."
  }],
  ["delete", {
    name: "delete",
    parameters: [
      { name: "config", type: "string", optional: false },
      { name: "section", type: "string", optional: false },
      { name: "option", type: "string", optional: true }
    ],
    returnType: "boolean | null",
    description: "Delete an option or section from given configuration. When invoked with three arguments, deletes the option. When invoked with two arguments, deletes the entire section."
  }],
  ["list_append", {
    name: "list_append",
    parameters: [
      { name: "config", type: "string", optional: false },
      { name: "section", type: "string", optional: false },
      { name: "option", type: "string", optional: false },
      { name: "value", type: "string | number | boolean", optional: false }
    ],
    returnType: "boolean | null",
    description: "Add an item to a list option in given configuration. The new value is appended to the end of the list."
  }],
  ["list_remove", {
    name: "list_remove",
    parameters: [
      { name: "config", type: "string", optional: false },
      { name: "section", type: "string", optional: false },
      { name: "option", type: "string", optional: false },
      { name: "value", type: "string | number | boolean", optional: false }
    ],
    returnType: "boolean | null",
    description: "Remove an item from a list option in given configuration. If the value appears multiple times, all matching occurrences will be removed."
  }],
  ["rename", {
    name: "rename",
    parameters: [
      { name: "config", type: "string", optional: false },
      { name: "section", type: "string", optional: false },
      { name: "option_or_name", type: "string", optional: false },
      { name: "name", type: "string", optional: true }
    ],
    returnType: "boolean | null",
    description: "Rename an option or section in given configuration. When invoked with four arguments, renames the option. When invoked with three arguments, renames the section."
  }],
  ["reorder", {
    name: "reorder",
    parameters: [
      { name: "config", type: "string", optional: false },
      { name: "section", type: "string", optional: false },
      { name: "index", type: "number", optional: false }
    ],
    returnType: "boolean | null",
    description: "Reorder sections in given configuration. Moves a single section by repositioning it to the given index within the configuration's section list."
  }],
  ["save", {
    name: "save",
    parameters: [
      { name: "config", type: "string", optional: true }
    ],
    returnType: "boolean | null",
    description: "Save accumulated cursor changes to delta directory. When config parameter is omitted, delta records for all currently loaded configuration files are written."
  }],
  ["commit", {
    name: "commit",
    parameters: [
      { name: "config", type: "string", optional: true }
    ],
    returnType: "boolean | null",
    description: "Update configuration files with accumulated cursor changes. When config parameter is omitted, all currently loaded configuration files are updated."
  }],
  ["revert", {
    name: "revert",
    parameters: [
      { name: "config", type: "string", optional: true }
    ],
    returnType: "boolean | null",
    description: "Revert accumulated cursor changes and associated delta records. When config parameter is omitted, all currently loaded configuration files are reverted."
  }],
  ["changes", {
    name: "changes",
    parameters: [
      { name: "config", type: "string", optional: true }
    ],
    returnType: "object | null",
    description: "Enumerate pending changes. Returns a dictionary of change record arrays, keyed by configuration name."
  }],
  ["foreach", {
    name: "foreach",
    parameters: [
      { name: "config", type: "string", optional: false },
      { name: "type", type: "string", optional: true },
      { name: "callback", type: "function", optional: false }
    ],
    returnType: "boolean | null",
    description: "Iterate configuration sections. The callback is invoked for each encountered section, optionally filtered by type."
  }],
  ["configs", {
    name: "configs",
    parameters: [],
    returnType: "string[] | null",
    description: "Enumerate existing configurations. Returns an array of configuration files present in the cursor's associated configuration directory."
  }],
  ["error", {
    name: "error",
    parameters: [],
    returnType: "string | null",
    description: "Query error information. Returns a string containing a description of the last occurred error or null if there is no error information."
  }]
]);

export class UciTypeRegistry {
  getFunctionNames(): string[] {
    return Array.from(uciFunctions.keys());
  }

  getFunction(name: string): UciFunctionSignature | undefined {
    return uciFunctions.get(name);
  }

  isUciFunction(name: string): boolean {
    return uciFunctions.has(name);
  }

  getCursorMethodNames(): string[] {
    return Array.from(uciCursorMethods.keys());
  }

  getCursorMethod(name: string): UciFunctionSignature | undefined {
    return uciCursorMethods.get(name);
  }

  isUciCursorMethod(name: string): boolean {
    return uciCursorMethods.has(name);
  }

  formatFunctionSignature(name: string): string {
    const func = this.getFunction(name);
    if (!func) return '';
    
    const params = func.parameters.map(p => {
      if (p.optional && p.defaultValue !== undefined) {
        return `[${p.name}: ${p.type}] = ${p.defaultValue}`;
      } else if (p.optional) {
        return `[${p.name}: ${p.type}]`;
      } else {
        return `${p.name}: ${p.type}`;
      }
    }).join(', ');
    
    return `${name}(${params}): ${func.returnType}`;
  }

  formatCursorMethodSignature(name: string): string {
    const func = this.getCursorMethod(name);
    if (!func) return '';
    
    const params = func.parameters.map(p => {
      if (p.optional && p.defaultValue !== undefined) {
        return `[${p.name}: ${p.type}] = ${p.defaultValue}`;
      } else if (p.optional) {
        return `[${p.name}: ${p.type}]`;
      } else {
        return `${p.name}: ${p.type}`;
      }
    }).join(', ');
    
    return `${name}(${params}): ${func.returnType}`;
  }

  getFunctionDocumentation(name: string): string {
    const func = this.getFunction(name);
    if (!func) return '';
    
    const signature = this.formatFunctionSignature(name);
    let doc = `**${signature}**\n\n${func.description}\n\n`;
    
    if (func.parameters.length > 0) {
      doc += '**Parameters:**\n';
      func.parameters.forEach(param => {
        const optional = param.optional ? ' (optional)' : '';
        const defaultVal = param.defaultValue !== undefined ? ` (default: ${param.defaultValue})` : '';
        doc += `- \`${param.name}\` (${param.type}${optional}${defaultVal})\n`;
      });
      doc += '\n';
    }
    
    doc += `**Returns:** \`${func.returnType}\``;
    return doc;
  }

  getCursorMethodDocumentation(name: string): string {
    const func = this.getCursorMethod(name);
    if (!func) return '';
    
    const signature = this.formatCursorMethodSignature(name);
    let doc = `**${signature}**\n\n${func.description}\n\n`;
    
    if (func.parameters.length > 0) {
      doc += '**Parameters:**\n';
      func.parameters.forEach(param => {
        const optional = param.optional ? ' (optional)' : '';
        const defaultVal = param.defaultValue !== undefined ? ` (default: ${param.defaultValue})` : '';
        doc += `- \`${param.name}\` (${param.type}${optional}${defaultVal})\n`;
      });
      doc += '\n';
    }
    
    doc += `**Returns:** \`${func.returnType}\``;
    return doc;
  }

  // Import validation methods
  isValidImport(name: string): boolean {
    return this.isUciFunction(name);
  }

  getValidImports(): string[] {
    return this.getFunctionNames();
  }
}

export const uciTypeRegistry = new UciTypeRegistry();