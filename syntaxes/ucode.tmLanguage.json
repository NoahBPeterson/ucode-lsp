{
  "name": "ucode",
  "scopeName": "source.ucode",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ucode",
          "match": "//.*$"
        },
        {
          "name": "comment.block.ucode",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ucode",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ucode",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.ucode",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.ucode",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.ucode",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.decimal.ucode",
          "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ucode",
          "match": "\\b(if|else|while|for|do|break|continue|return|try|catch|finally|throw|switch|case|default|delete|typeof|instanceof|in|of|with|yield|await|async)\\b"
        },
        {
          "name": "storage.type.ucode",
          "match": "\\b(var|let|const|function)\\b"
        },
        {
          "name": "keyword.control.import.ucode",
          "match": "\\b(import|export|from|as|default)\\b"
        },
        {
          "name": "keyword.other.ucode",
          "match": "\\b(new|this|super|extends|static|class)\\b"
        },
        {
          "name": "constant.language.ucode",
          "match": "\\b(true|false|null|undefined|NaN|Infinity)\\b"
        },
        {
          "name": "keyword.other.ucode",
          "match": "\\b(use strict)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.ucode",
          "match": "\\+|\\-|\\*|/|%|\\+\\+|\\-\\-"
        },
        {
          "name": "keyword.operator.assignment.ucode",
          "match": "=|\\+=|\\-=|\\*=|/=|%=|\\|=|&=|\\^=|<<=|>>=|>>>="
        },
        {
          "name": "keyword.operator.comparison.ucode",
          "match": "==|!=|===|!==|<|>|<=|>=|<=>|~~|!~"
        },
        {
          "name": "keyword.operator.logical.ucode",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.bitwise.ucode",
          "match": "&|\\||\\^|~|<<|>>|>>>"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function.builtin.ucode",
          "match": "\\b(print|printf|sprintf|length|substr|split|join|trim|ltrim|rtrim|chr|ord|hex|int|type|keys|values|push|pop|shift|unshift|slice|splice|sort|reverse|map|filter|exists|delete|clone|gc|time|localtime|gmtime|timelocal|timegm|clock|sleep|system|popen|require|include|render|json|b64enc|b64dec|hexenc|hexdec|match|replace|search|uc|lc|uchr|min|max|abs|atan2|cos|sin|tan|exp|log|sqrt|rand|srand|trace|warn|die|exit|assert|loadfile|loadstring|call|sourcepath|proto|uniq|index|rindex|wildcard|regexp|getenv|open|error)\\b(?=\\s*\\()"
        },
        {
          "name": "entity.name.function.ucode",
          "match": "\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*(?=\\()"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.ucode",
          "match": "\\b[a-zA-Z_$][a-zA-Z0-9_$]*\\b"
        }
      ]
    }
  }
}