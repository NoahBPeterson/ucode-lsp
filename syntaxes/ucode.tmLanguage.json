{
  "name": "ucode",
  "scopeName": "source.ucode",
  "patterns": [
    {
      "include": "#template_blocks"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#property_access"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#objects"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "property_access": {
      "patterns": [
        {
          "name": "variable.other.property.ucode",
          "match": "(?<=\\.)\\b(try|catch|if|else|elif|endif|while|endwhile|for|endfor|break|continue|return|switch|case|default|in|let|const|function|endfunction|delete|import|export|true|false|null|this|[a-zA-Z_$][a-zA-Z0-9_$]*)\\b"
        }
      ]
    },
    "template_blocks": {
      "patterns": [
        {
          "name": "meta.embedded.block.expression.ucode",
          "begin": "{{",
          "end": "}}",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.embedded.block.statement.ucode",
          "begin": "{%",
          "end": "%}",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ucode",
          "match": "//.*$"
        },
        {
          "name": "comment.block.ucode",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.block.template.ucode",
          "begin": "{#",
          "end": "#}"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ucode",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ucode",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.ucode",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.ucode",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.template.ucode",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "constant.character.escape.ucode",
              "match": "\\\\."
            },
            {
              "name": "keyword.control.interpolation.ucode",
              "begin": "\\$\\{",
              "end": "\\}",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.ucode",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary.ucode",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.octal.ucode",
          "match": "\\b0[oO][0-7]+\\b"
        },
        {
          "name": "constant.numeric.decimal.ucode",
          "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ucode",
          "match": "\\b(if|else|elif|endif|while|endwhile|for|endfor|break|continue|return|try|catch|switch|case|default|in)\\b"
        },
        {
          "name": "storage.type.ucode",
          "match": "\\b(let|const|function|endfunction)\\b"
        },
        {
          "name": "keyword.operator.delete.ucode",
          "match": "\\b(delete)\\b(?!\\s*\\()"
        },
        {
          "name": "keyword.control.module.ucode",
          "match": "\\b(import|export)\\b"
        },
        {
          "name": "constant.language.ucode",
          "match": "\\b(true|false|null|this)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.ucode",
          "match": "(\\+|\\-|\\*|/|%|\\*\\*|\\+\\+|--)"
        },
        {
          "name": "keyword.operator.assignment.ucode",
          "match": "(=|\\+=|\\-=|\\*=|/=|%=|\\*\\*=|&=|\\^=|\\|=|<<=|>>=|&&=|\\|\\|=|\\?\\?=)"
        },
        {
          "name": "keyword.operator.comparison.ucode",
          "match": "(===|!==|==|!=|<|<=|>|>=)"
        },
        {
          "name": "keyword.operator.logical.ucode",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.bitwise.ucode",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.ternary.ucode",
          "match": "(\\?|:)"
        },
        {
          "name": "keyword.operator.optional-chaining.ucode",
          "match": "(\\?\\.)"
        },
        {
          "name": "keyword.operator.nullish-coalescing.ucode",
          "match": "(\\?\\?)"
        },
        {
          "name": "keyword.operator.arrow.ucode",
          "match": "(=>)"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function.builtin.ucode",
          "match": "\\b(print|printf|sprintf|length|substr|split|join|trim|ltrim|rtrim|chr|ord|uc|lc|type|keys|values|push|pop|shift|unshift|index|require|include|json|match|replace|system|time|sleep|localtime|gmtime|timelocal|timegm|min|max|uniq|b64enc|b64dec|hexenc|hexdec|hex|uchr|iptoarr|arrtoip|int|loadstring|loadfile|wildcard|regexp|assert|call|signal|clock|sourcepath|gc)\\b(?=\\s*\\()"
        },
        {
          "name": "entity.name.function.ucode",
          "match": "\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*(?=\\()"
        }
      ]
    },
    "objects": {
      "patterns": [
        {
          "name": "meta.object.literal.ucode",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "name": "meta.object.property.ucode",
              "begin": "\\b(try|catch|if|else|while|for|return|break|continue|function|let|const|true|false|null|this|switch|case|default|import|export|in|delete|[a-zA-Z_$][a-zA-Z0-9_$]*)\\s*(?=:)",
              "beginCaptures": {
                "1": {
                  "name": "variable.other.property.ucode"
                }
              },
              "end": "(?=:)",
              "patterns": []
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.ucode",
          "match": "\\b[a-zA-Z_$][a-zA-Z0-9_$]*\\b"
        }
      ]
    }
  }
}